{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/dashBoardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { MdModeEdit, MdDelete } from 'react-icons/md';\nimport axios from 'axios';\nimport config from '../config/config';\nimport PropTypes from 'prop-types';\nimport '../task2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashBoardCard({\n  card,\n  getCardsForList,\n  boardId\n}) {\n  _s();\n\n  const [currentCardName, updateCurrentCard] = useState(card.name);\n  const updateForm = useRef(null);\n\n  const deleteCard = async cardId => {\n    try {\n      await axios.delete(`https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`);\n      const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`);\n      getCardsForList(getCards.data);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleCardChange = e => {\n    updateCurrentCard(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-card\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"update-card-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: currentCardName,\n            onChange: e => handleCardChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MdModeEdit, {\n            className: \"update-card-button\",\n            type: \"submit\",\n            ref: updateForm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-icons\",\n        children: /*#__PURE__*/_jsxDEV(MdDelete, {\n          onClick: () => deleteCard(card.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DashBoardCard, \"oBLfqJzYBWMyDVkLfpQ0qWN/R+o=\");\n\n_c = DashBoardCard;\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n};\nexport default DashBoardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashBoardCard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/dashBoardCard.js"],"names":["React","useRef","useState","MdModeEdit","MdDelete","axios","config","PropTypes","DashBoardCard","card","getCardsForList","boardId","currentCardName","updateCurrentCard","name","updateForm","deleteCard","cardId","delete","key","token","getCards","get","data","e","console","error","handleCardChange","target","value","id","propTypes","object","func","string"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,gBAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,cAAP;;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,eAAR;AAAyBC,EAAAA;AAAzB,CAAvB,EAA2D;AAAA;;AACzD,QAAM,CAACC,eAAD,EAAkBC,iBAAlB,IAAuCX,QAAQ,CAACO,IAAI,CAACK,IAAN,CAArD;AACA,QAAMC,UAAU,GAAGd,MAAM,CAAC,IAAD,CAAzB;;AACA,QAAMe,UAAU,GAAG,MAAOC,MAAP,IAAkB;AACnC,QAAI;AACF,YAAMZ,KAAK,CAACa,MAAN,CACH,kCAAiCD,MAAO,QAAOX,MAAM,CAACa,GAAI,UAASb,MAAM,CAACc,KAAM,EAD7E,CAAN;AAGA,YAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CACpB,mCAAkCX,OAAQ,cAAaL,MAAM,CAACa,GAAI,UAASb,MAAM,CAACc,KAAM,EADpE,CAAvB;AAGAV,MAAAA,eAAe,CAACW,QAAQ,CAACE,IAAV,CAAf;AACD,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,GAZD;;AAaA,QAAMG,gBAAgB,GAAIH,CAAD,IAAO;AAC9BX,IAAAA,iBAAiB,CAACW,CAAC,CAACI,MAAF,CAASC,KAAV,CAAjB;AACD,GAFD;;AAGA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACE;AAAoB,UAAA,SAAS,EAAC,kBAA9B;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,KAAK,EAAEjB,eAFT;AAGE,YAAA,QAAQ,EAAGY,CAAD,IAAOG,gBAAgB,CAACH,CAAD;AAHnC;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE,QAAC,UAAD;AACE,YAAA,SAAS,EAAC,oBADZ;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,GAAG,EAAET;AAHP;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA,WAAWN,IAAI,CAACqB,EAAhB;AAAA;AAAA;AAAA;AAAA;AADF,SAAkCrB,IAAI,CAACqB,EAAvC;AAAA;AAAA;AAAA;AAAA,cADF,eAgBE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACE,QAAC,QAAD;AAAU,UAAA,OAAO,EAAE,MAAMd,UAAU,CAACP,IAAI,CAACqB,EAAN;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA,OAA4BrB,IAAI,CAACqB,EAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GA3CQtB,a;;KAAAA,a;AA4CTA,aAAa,CAACuB,SAAd,GAA0B;AACxBtB,EAAAA,IAAI,EAAEF,SAAS,CAACyB,MADQ;AAExBtB,EAAAA,eAAe,EAAEH,SAAS,CAAC0B,IAFH;AAGxBtB,EAAAA,OAAO,EAAEJ,SAAS,CAAC2B;AAHK,CAA1B;AAMA,eAAe1B,aAAf","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { MdModeEdit, MdDelete } from 'react-icons/md'\nimport axios from 'axios'\nimport config from '../config/config'\nimport PropTypes from 'prop-types'\nimport '../task2.css'\n\nfunction DashBoardCard({ card, getCardsForList, boardId }) {\n  const [currentCardName, updateCurrentCard] = useState(card.name)\n  const updateForm = useRef(null)\n  const deleteCard = async (cardId) => {\n    try {\n      await axios.delete(\n        `https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`\n      )\n      const getCards = await axios.get(\n        `https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`\n      )\n      getCardsForList(getCards.data)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const handleCardChange = (e) => {\n    updateCurrentCard(e.target.value)\n  }\n  return (\n    <div>\n      <div className=\"cards\" key={card.id}>\n        <div className=\"update-card\" key={card.id}>\n          <form key={card.id} className=\"update-card-form\">\n            <input\n              type=\"text\"\n              value={currentCardName}\n              onChange={(e) => handleCardChange(e)}\n            ></input>\n\n            <MdModeEdit\n              className=\"update-card-button\"\n              type=\"submit\"\n              ref={updateForm}\n            />\n          </form>\n        </div>\n        <div className=\"card-icons\">\n          <MdDelete onClick={() => deleteCard(card.id)} />\n        </div>\n      </div>\n    </div>\n  )\n}\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n}\n\nexport default DashBoardCard\n"]},"metadata":{},"sourceType":"module"}