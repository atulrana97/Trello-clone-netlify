{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/dashBoardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { MdModeEdit, MdDelete } from 'react-icons/md';\nimport axios from 'axios';\nimport config from '../config/config';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashBoardCard({\n  card,\n  getCardsForList,\n  boardId\n}) {\n  _s();\n\n  const [currentCardName, updateCurrentCard] = useState('');\n  const updateForm = useRef(null);\n\n  const deleteCard = async cardId => {\n    try {\n      await axios.delete(`https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`);\n      const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`);\n      getCardsForList(getCards.data);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  console.log(card);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-card\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"update-card-form\",\n          ref: updateForm,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: card.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-icons\",\n        children: [/*#__PURE__*/_jsxDEV(MdModeEdit, {\n          element: card,\n          onClick: e => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MdDelete, {\n          onClick: () => deleteCard(card.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DashBoardCard, \"em5dhDOlxtv7msrF8aD1knqeK0M=\");\n\n_c = DashBoardCard;\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n};\nexport default DashBoardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashBoardCard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/dashBoardCard.js"],"names":["React","useRef","useState","MdModeEdit","MdDelete","axios","config","PropTypes","DashBoardCard","card","getCardsForList","boardId","currentCardName","updateCurrentCard","updateForm","deleteCard","cardId","delete","key","token","getCards","get","data","e","console","error","log","name","id","propTypes","object","func","string"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,gBAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,eAAR;AAAyBC,EAAAA;AAAzB,CAAvB,EAA2D;AAAA;;AACzD,QAAM,CAACC,eAAD,EAAkBC,iBAAlB,IAAuCX,QAAQ,CAAC,EAAD,CAArD;AACA,QAAMY,UAAU,GAAGb,MAAM,CAAC,IAAD,CAAzB;;AACA,QAAMc,UAAU,GAAG,MAAOC,MAAP,IAAkB;AACnC,QAAI;AACF,YAAMX,KAAK,CAACY,MAAN,CACH,kCAAiCD,MAAO,QAAOV,MAAM,CAACY,GAAI,UAASZ,MAAM,CAACa,KAAM,EAD7E,CAAN;AAGA,YAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CACpB,mCAAkCV,OAAQ,cAAaL,MAAM,CAACY,GAAI,UAASZ,MAAM,CAACa,KAAM,EADpE,CAAvB;AAGAT,MAAAA,eAAe,CAACU,QAAQ,CAACE,IAAV,CAAf;AACD,KARD,CAQE,OAAOC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,GAZD;;AAaAC,EAAAA,OAAO,CAACE,GAAR,CAAYjB,IAAZ;AACA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACE;AAAoB,UAAA,SAAS,EAAC,kBAA9B;AAAiD,UAAA,GAAG,EAAEK,UAAtD;AAAA,iCACE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,KAAK,EAAEL,IAAI,CAACkB;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF,WAAWlB,IAAI,CAACmB,EAAhB;AAAA;AAAA;AAAA;AAAA;AADF,SAAkCnB,IAAI,CAACmB,EAAvC;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAEnB,IAArB;AAA2B,UAAA,OAAO,EAAGc,CAAD,IAAO,CAAE;AAA7C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,QAAD;AAAU,UAAA,OAAO,EAAE,MAAMR,UAAU,CAACN,IAAI,CAACmB,EAAN;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA,OAA4BnB,IAAI,CAACmB,EAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAhCQpB,a;;KAAAA,a;AAiCTA,aAAa,CAACqB,SAAd,GAA0B;AACxBpB,EAAAA,IAAI,EAAEF,SAAS,CAACuB,MADQ;AAExBpB,EAAAA,eAAe,EAAEH,SAAS,CAACwB,IAFH;AAGxBpB,EAAAA,OAAO,EAAEJ,SAAS,CAACyB;AAHK,CAA1B;AAMA,eAAexB,aAAf","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { MdModeEdit, MdDelete } from 'react-icons/md'\nimport axios from 'axios'\nimport config from '../config/config'\nimport PropTypes from 'prop-types'\n\nfunction DashBoardCard({ card, getCardsForList, boardId }) {\n  const [currentCardName, updateCurrentCard] = useState('')\n  const updateForm = useRef(null)\n  const deleteCard = async (cardId) => {\n    try {\n      await axios.delete(\n        `https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`\n      )\n      const getCards = await axios.get(\n        `https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`\n      )\n      getCardsForList(getCards.data)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  console.log(card)\n  return (\n    <div>\n      <div className=\"cards\" key={card.id}>\n        <div className=\"update-card\" key={card.id}>\n          <form key={card.id} className=\"update-card-form\" ref={updateForm}>\n            <input type=\"text\" value={card.name}></input>\n          </form>\n        </div>\n        <div className=\"card-icons\">\n          <MdModeEdit element={card} onClick={(e) => {}} />\n          <MdDelete onClick={() => deleteCard(card.id)} />\n        </div>\n      </div>\n    </div>\n  )\n}\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n}\n\nexport default DashBoardCard\n"]},"metadata":{},"sourceType":"module"}