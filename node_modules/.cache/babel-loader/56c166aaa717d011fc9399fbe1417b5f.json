{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const onlyId = id.split('').filter(ele => ele !== ':');\n  let finalId = '';\n  onlyId.map(ele => finalId += ele);\n  const [boardLists, getBoards] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [load, checkLoad] = useState(true);\n  useEffect(async () => {\n    const listLink = `https://api.trello.com/1/boards/${finalId}/lists?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`;\n    console.log(listLink);\n    const getLists = await axios.get(listLink);\n    getBoards(getLists.data);\n    const cardLink = `https://api.trello.com/1/boards/${finalId}/cards?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`;\n    const getCards = await axios.get(cardLink);\n    getCardsForList(getCards.data);\n    checkLoad(false);\n  }, []);\n  console.log(boardListCards);\n\n  if (load) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Wait Boards are loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board\",\n    children: boardLists.map(ele => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-list\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: ele.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this)\n        }, ele.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: boardListCards.map(element => {\n            if (element.idList === ele.id) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards\",\n                children: element.name\n              }, element.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 21\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"div\", {}, element.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 26\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)]\n      }, ele.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"+tOz62GVUPPfwLr7Idk98qDBvjA=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","Dashboard","id","onlyId","split","filter","ele","finalId","map","boardLists","getBoards","boardListCards","getCardsForList","load","checkLoad","listLink","console","log","getLists","get","data","cardLink","getCards","name","element","idList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,cAAP;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAASH,SAAS,EAAxB;AACA,QAAMI,MAAM,GAAGD,EAAE,CAACE,KAAH,CAAS,EAAT,EAAaC,MAAb,CAAqBC,GAAD,IAASA,GAAG,KAAK,GAArC,CAAf;AACA,MAAIC,OAAO,GAAG,EAAd;AACAJ,EAAAA,MAAM,CAACK,GAAP,CAAYF,GAAD,IAAUC,OAAO,IAAID,GAAhC;AACA,QAAM,CAACG,UAAD,EAAaC,SAAb,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACc,cAAD,EAAiBC,eAAjB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACgB,IAAD,EAAOC,SAAP,IAAoBjB,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMiB,QAAQ,GAAI,mCAAkCR,OAAQ,oHAA5D;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAMG,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAUJ,QAAV,CAAvB;AACAL,IAAAA,SAAS,CAACQ,QAAQ,CAACE,IAAV,CAAT;AACA,UAAMC,QAAQ,GAAI,mCAAkCd,OAAQ,oHAA5D;AACA,UAAMe,QAAQ,GAAG,MAAMtB,KAAK,CAACmB,GAAN,CAAUE,QAAV,CAAvB;AACAT,IAAAA,eAAe,CAACU,QAAQ,CAACF,IAAV,CAAf;AACAN,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GATQ,EASN,EATM,CAAT;AAUAE,EAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;;AAEA,MAAIE,IAAJ,EAAU;AACR,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,cACGJ,UAAU,CAACD,GAAX,CAAgBF,GAAD,IAAS;AACvB,0BACE;AAAA,gCACE;AAAkB,UAAA,SAAS,EAAC,YAA5B;AAAA,iCACE;AAAA,sBAAKA,GAAG,CAACiB;AAAT;AAAA;AAAA;AAAA;AAAA;AADF,WAAUjB,GAAG,CAACJ,EAAd;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA,oBACGS,cAAc,CAACH,GAAf,CAAoBgB,OAAD,IAAa;AAC/B,gBAAIA,OAAO,CAACC,MAAR,KAAmBnB,GAAG,CAACJ,EAA3B,EAA+B;AAC7B,kCACE;AAAK,gBAAA,SAAS,EAAC,OAAf;AAAA,0BACGsB,OAAO,CAACD;AADX,iBAA4BC,OAAO,CAACtB,EAApC;AAAA;AAAA;AAAA;AAAA,sBADF;AAKD,aAND,MAMO;AACL,kCAAO,mBAAUsB,OAAO,CAACtB,EAAlB;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;AACF,WAVA;AADH;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA,SAAUI,GAAG,CAACJ,EAAd;AAAA;AAAA;AAAA;AAAA,cADF;AAoBD,KArBA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GAjDQD,S;UACQF,S;;;KADRE,S;AAmDT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\n\nfunction Dashboard() {\n  const { id } = useParams()\n  const onlyId = id.split('').filter((ele) => ele !== ':')\n  let finalId = ''\n  onlyId.map((ele) => (finalId += ele))\n  const [boardLists, getBoards] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [load, checkLoad] = useState(true)\n  useEffect(async () => {\n    const listLink = `https://api.trello.com/1/boards/${finalId}/lists?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`\n    console.log(listLink)\n    const getLists = await axios.get(listLink)\n    getBoards(getLists.data)\n    const cardLink = `https://api.trello.com/1/boards/${finalId}/cards?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`\n    const getCards = await axios.get(cardLink)\n    getCardsForList(getCards.data)\n    checkLoad(false)\n  }, [])\n  console.log(boardListCards)\n\n  if (load) {\n    return <div>Wait Boards are loading</div>\n  }\n  return (\n    <div className=\"dash-board\">\n      {boardLists.map((ele) => {\n        return (\n          <div key={ele.id}>\n            <div key={ele.id} className=\"board-list\">\n              <h1>{ele.name}</h1>\n            </div>\n            <div>\n              {boardListCards.map((element) => {\n                if (element.idList === ele.id) {\n                  return (\n                    <div className=\"cards\" key={element.id}>\n                      {element.name}\n                    </div>\n                  )\n                } else {\n                  return <div key={element.id}></div>\n                }\n              })}\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}