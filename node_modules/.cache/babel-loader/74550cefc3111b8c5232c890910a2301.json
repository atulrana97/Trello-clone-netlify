{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios'; // import { FaCheck } from 'react-icons/fa'\n\nimport AddCard from '../components/AddCard';\nimport AddList from '../components/AddList';\nimport config from '../config/config';\nimport DashBoardCard from '../components/DashBoardCard';\nimport DashBoardLists from '../components/DashBoardLists';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    finalId\n  } = useParams();\n  const [boardLists, getBoardsLists] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [currentBoardName, setCurrentBoardName] = useState('');\n  const [currentBackgroundImage, setCurrentImage] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [checkBoardName, setBoardName] = useState(false);\n  const [loadingUpdate, setLoadingUpdate] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const getLists = await axios.get(`https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`);\n      const getCards = await axios.get(`https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`);\n      const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n      setLoading(false);\n      setCurrentBoardName(getCurrentBoardName.data.name);\n      getCardsForList(getCards.data);\n      getBoardsLists(getLists.data);\n      setCurrentImage(getCurrentBoardName.data.prefs);\n    };\n\n    fetchData();\n  }, []);\n\n  const handleBoardName = e => {\n    setCurrentBoardName(e.target.value);\n  };\n\n  const updateBoardName = async e => {\n    e.preventDefault();\n    setLoadingUpdate(true);\n    await axios.put(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`);\n    const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n    setCurrentBoardName(getCurrentBoardName.data.name);\n    setLoadingUpdate(false);\n    setBoardName(false);\n  };\n\n  const changeBoardState = () => {\n    if (checkBoardName === true) {\n      setBoardName(false);\n    } else {\n      setBoardName(true);\n    }\n  };\n\n  const boardName = () => {\n    if (checkBoardName) {\n      ;\n\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: \"update-board-name\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: updateBoardName,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: currentBoardName,\n            onChange: handleBoardName,\n            \"data-testid\": \"updateFormInputField\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"update\",\n            \"data-testid\": \"updateFormSubmitButton\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"cancel\",\n          onClick: changeBoardState,\n          \"data-testid\": \"cancel\",\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 8\n      }, this);\n    } else {\n      ;\n\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        onClick: changeBoardState,\n        \"data-testid\": \"openBoardNameUpdateForm\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          \"data-testid\": currentBoardName,\n          children: currentBoardName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 8\n      }, this);\n    }\n  };\n\n  const backgroundSet = {\n    backgroundImage: `url(${currentBackgroundImage.backgroundImage})`,\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: `${currentBackgroundImage.backgroundColor}`\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      \"data-testid\": \"loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board-page\",\n    style: backgroundSet,\n    \"data-testid\": \"pageBackground\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-board\",\n      children: boardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-board\",\n      children: [boardLists.map(ele => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(DashBoardLists, {\n            list: ele,\n            getBoardsLists: getBoardsLists\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-cards\",\n            children: boardListCards.map(element => {\n              if (element.idList === ele.id) {\n                return /*#__PURE__*/_jsxDEV(DashBoardCard, {\n                  card: element,\n                  getCardsForList: getCardsForList,\n                  boardId: finalId\n                }, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 23\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {}, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 28\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(AddCard, {\n              listId: ele.id,\n              boardId: finalId,\n              getCardsForList: getCardsForList\n            }, ele.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)]\n        }, ele.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddList, {\n        boardId: finalId,\n        getBoardsLists: getBoardsLists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"w86hhuShWC5AAO4Pb7vJlnV3eEY=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","AddCard","AddList","config","DashBoardCard","DashBoardLists","Dashboard","finalId","boardLists","getBoardsLists","boardListCards","getCardsForList","currentBoardName","setCurrentBoardName","currentBackgroundImage","setCurrentImage","loading","setLoading","checkBoardName","setBoardName","loadingUpdate","setLoadingUpdate","fetchData","getLists","get","key","token","getCards","getCurrentBoardName","data","name","prefs","handleBoardName","e","target","value","updateBoardName","preventDefault","put","changeBoardState","boardName","backgroundSet","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backgroundColor","map","ele","element","idList","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\n// import { FaCheck } from 'react-icons/fa'\nimport AddCard from '../components/AddCard'\nimport AddList from '../components/AddList'\nimport config from '../config/config'\nimport DashBoardCard from '../components/DashBoardCard'\nimport DashBoardLists from '../components/DashBoardLists'\n\nfunction Dashboard() {\n  const { finalId } = useParams()\n\n  const [boardLists, getBoardsLists] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [currentBoardName, setCurrentBoardName] = useState('')\n  const [currentBackgroundImage, setCurrentImage] = useState({})\n  const [loading, setLoading] = useState(true)\n  const [checkBoardName, setBoardName] = useState(false)\n  const [loadingUpdate, setLoadingUpdate] = useState(false)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const getLists = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`\n      )\n\n      const getCards = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`\n      )\n\n      const getCurrentBoardName = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n      )\n\n      setLoading(false)\n      setCurrentBoardName(getCurrentBoardName.data.name)\n      getCardsForList(getCards.data)\n      getBoardsLists(getLists.data)\n      setCurrentImage(getCurrentBoardName.data.prefs)\n    }\n    fetchData()\n  }, [])\n\n  const handleBoardName = (e) => {\n    setCurrentBoardName(e.target.value)\n  }\n  const updateBoardName = async (e) => {\n    e.preventDefault()\n    setLoadingUpdate(true)\n    await axios.put(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`\n    )\n    const getCurrentBoardName = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n    )\n    setCurrentBoardName(getCurrentBoardName.data.name)\n    setLoadingUpdate(false)\n    setBoardName(false)\n  }\n  const changeBoardState = () => {\n    if (checkBoardName === true) {\n      setBoardName(false)\n    } else {\n      setBoardName(true)\n    }\n  }\n\n  const boardName = () => {\n    if (checkBoardName) {\n      ;<div className=\"update-board-name\">\n        <form onSubmit={updateBoardName}>\n          <input\n            type=\"text\"\n            value={currentBoardName}\n            onChange={handleBoardName}\n            data-testid=\"updateFormInputField\"\n          ></input>\n          <input\n            type=\"submit\"\n            value=\"update\"\n            data-testid=\"updateFormSubmitButton\"\n          />\n        </form>\n        <h1 className=\"cancel\" onClick={changeBoardState} data-testid=\"cancel\">\n          X\n        </h1>\n      </div>\n    } else {\n      ;<div onClick={changeBoardState} data-testid=\"openBoardNameUpdateForm\">\n        <h1 data-testid={currentBoardName}>{currentBoardName}</h1>\n      </div>\n    }\n  }\n  const backgroundSet = {\n    backgroundImage: `url(${currentBackgroundImage.backgroundImage})`,\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: `${currentBackgroundImage.backgroundColor}`\n  }\n\n  if (loading) {\n    return (\n      <div className=\"loading\" data-testid=\"loading\">\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\" />\n        )\n      </div>\n    )\n  }\n  return (\n    <div\n      className=\"dash-board-page\"\n      style={backgroundSet}\n      data-testid=\"pageBackground\"\n    >\n      <div className=\"current-board\">{boardName}</div>\n      <div className=\"dash-board\">\n        {boardLists.map((ele) => {\n          return (\n            <div key={ele.id} className=\"board-list-container\">\n              <DashBoardLists list={ele} getBoardsLists={getBoardsLists} />\n              <div className=\"list-cards\">\n                {boardListCards.map((element) => {\n                  if (element.idList === ele.id) {\n                    return (\n                      <DashBoardCard\n                        key={element.id}\n                        card={element}\n                        getCardsForList={getCardsForList}\n                        boardId={finalId}\n                      />\n                    )\n                  } else {\n                    return <div key={element.id}></div>\n                  }\n                })}\n              </div>\n              <div>\n                <AddCard\n                  key={ele.id}\n                  listId={ele.id}\n                  boardId={finalId}\n                  getCardsForList={getCardsForList}\n                />\n              </div>\n            </div>\n          )\n        })}\n        <AddList boardId={finalId} getBoardsLists={getBoardsLists} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}