{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport NavBar from '../components/NavBar';\nimport AddCard from '../components/AddCard';\nimport AddList from '../components/AddList';\nimport config from '../config/config';\nimport dashBoardCard from '../components/dashBoardCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const onlyId = id.split('').filter(ele => ele !== ':');\n  let finalId = '';\n  onlyId.map(ele => finalId += ele); // const [currentState, changeCurrentState] = useState('')\n\n  const [boardLists, getBoardsLists] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [load, checkLoad] = useState(true);\n  const [currentBoardName, setCurrentBoardName] = useState('');\n  const [currentListName, setCurrentListName] = useState('');\n  const [checkBoardName, setBoardName] = useState(false);\n  const [checkListName, setListName] = useState(false); // const [cardState, setCardState] = useState(false)\n\n  useEffect(async () => {\n    const getLists = await axios.get(`https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`);\n    getBoardsLists(getLists.data);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`);\n    getCardsForList(getCards.data);\n    const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n    setCurrentBoardName(getCurrentBoardName.data.name);\n    checkLoad(false);\n  }, []);\n\n  const handleBoardName = e => {\n    setCurrentBoardName(e.target.value);\n  };\n\n  const handleListName = e => {\n    setCurrentListName(e.target.value);\n  };\n\n  const updateBoardName = async e => {\n    e.preventDefault();\n\n    try {\n      await axios.put(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`);\n      const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n      setCurrentBoardName(getCurrentBoardName.data.name);\n      setBoardName(false);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const updateListName = async (e, listId) => {\n    e.preventDefault();\n\n    try {\n      await axios.put(`'https://api.trello.com/1/lists/${listId}?key=${config.key}&token=${config.token}&name=${currentListName}`);\n      const getLists = await axios.get(`https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`);\n      getBoardsLists(getLists.data);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const changeBoardState = () => {\n    setBoardName(true);\n  };\n\n  const changeListState = (e, id) => {\n    if (e.id === id) {\n      setListName(true);\n    }\n  };\n\n  const titleToList = list => {\n    if (checkListName) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-board-name\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: (e, list) => {\n            updateListName(e, list);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: list.name,\n            onChange: handleListName\n          }, list.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Change Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, list.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: list.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const boardName = checkBoardName ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"update-board-name\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateBoardName,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentBoardName,\n        onChange: handleBoardName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Change Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: currentBoardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n\n  if (load) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Wait Boards are loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board-page\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: changeBoardState,\n      className: \"current-board\",\n      children: boardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-board\",\n      children: [boardLists.map(ele => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-list-name\",\n            onClick: e => changeListState(e, ele.id),\n            children: titleToList(ele)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-cards\",\n            children: boardListCards.map(element => {\n              if (element.idList === ele.id) {\n                return /*#__PURE__*/_jsxDEV(\"dashBoardCard\", {\n                  card: element,\n                  getCardsForList: getCardsForList\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 23\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {}, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 28\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            listId: ele.id,\n            boardId: finalId,\n            getCardsForList: getCardsForList\n          }, ele.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)]\n        }, ele.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddList, {\n        boardId: finalId,\n        getBoardsLists: getBoardsLists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"/jXjKOAow6XTgciucX0yEDhoO44=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","NavBar","AddCard","AddList","config","dashBoardCard","Dashboard","id","onlyId","split","filter","ele","finalId","map","boardLists","getBoardsLists","boardListCards","getCardsForList","load","checkLoad","currentBoardName","setCurrentBoardName","currentListName","setCurrentListName","checkBoardName","setBoardName","checkListName","setListName","getLists","get","key","token","data","getCards","getCurrentBoardName","name","handleBoardName","e","target","value","handleListName","updateBoardName","preventDefault","put","console","error","updateListName","listId","changeBoardState","changeListState","titleToList","list","boardName","element","idList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\nimport NavBar from '../components/NavBar'\nimport AddCard from '../components/AddCard'\nimport AddList from '../components/AddList'\nimport config from '../config/config'\nimport dashBoardCard from '../components/dashBoardCard'\n\nfunction Dashboard() {\n  const { id } = useParams()\n  const onlyId = id.split('').filter((ele) => ele !== ':')\n  let finalId = ''\n  onlyId.map((ele) => (finalId += ele))\n  // const [currentState, changeCurrentState] = useState('')\n  const [boardLists, getBoardsLists] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [load, checkLoad] = useState(true)\n  const [currentBoardName, setCurrentBoardName] = useState('')\n  const [currentListName, setCurrentListName] = useState('')\n  const [checkBoardName, setBoardName] = useState(false)\n  const [checkListName, setListName] = useState(false)\n  // const [cardState, setCardState] = useState(false)\n  useEffect(async () => {\n    const getLists = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`\n    )\n    getBoardsLists(getLists.data)\n\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`\n    )\n    getCardsForList(getCards.data)\n\n    const getCurrentBoardName = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n    )\n    setCurrentBoardName(getCurrentBoardName.data.name)\n\n    checkLoad(false)\n  }, [])\n  const handleBoardName = (e) => {\n    setCurrentBoardName(e.target.value)\n  }\n  const handleListName = (e) => {\n    setCurrentListName(e.target.value)\n  }\n\n  const updateBoardName = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.put(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`\n      )\n      const getCurrentBoardName = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n      )\n      setCurrentBoardName(getCurrentBoardName.data.name)\n      setBoardName(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const updateListName = async (e, listId) => {\n    e.preventDefault()\n    try {\n      await axios.put(\n        `'https://api.trello.com/1/lists/${listId}?key=${config.key}&token=${config.token}&name=${currentListName}`\n      )\n      const getLists = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`\n      )\n      getBoardsLists(getLists.data)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const changeBoardState = () => {\n    setBoardName(true)\n  }\n  const changeListState = (e, id) => {\n    if (e.id === id) {\n      setListName(true)\n    }\n  }\n  const titleToList = (list) => {\n    if (checkListName) {\n      return (\n        <div className=\"update-board-name\" key={list.id}>\n          <form\n            onSubmit={(e, list) => {\n              updateListName(e, list)\n            }}\n          >\n            <input\n              type=\"text\"\n              key={list.id}\n              value={list.name}\n              onChange={handleListName}\n            ></input>\n            <input type=\"submit\" value=\"Change Name\"></input>\n          </form>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <h1>{list.name}</h1>\n        </div>\n      )\n    }\n  }\n  const boardName = checkBoardName ? (\n    <div className=\"update-board-name\">\n      <form onSubmit={updateBoardName}>\n        <input\n          type=\"text\"\n          value={currentBoardName}\n          onChange={handleBoardName}\n        ></input>\n        <input type=\"submit\" value=\"Change Name\"></input>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h1>{currentBoardName}</h1>\n    </div>\n  )\n\n  if (load) {\n    return <div>Wait Boards are loading</div>\n  }\n  return (\n    <div className=\"dash-board-page\">\n      <NavBar />\n      <div onClick={changeBoardState} className=\"current-board\">\n        {boardName}\n      </div>\n      <div className=\"dash-board\">\n        {boardLists.map((ele) => {\n          return (\n            <div key={ele.id} className=\"board-list-container\">\n              <div\n                className=\"board-list-name\"\n                onClick={(e) => changeListState(e, ele.id)}\n              >\n                {titleToList(ele)}\n              </div>\n              <div className=\"list-cards\">\n                {boardListCards.map((element) => {\n                  if (element.idList === ele.id) {\n                    return (\n                      <dashBoardCard\n                        card={element}\n                        getCardsForList={getCardsForList}\n                      />\n                    )\n                  } else {\n                    return <div key={element.id}></div>\n                  }\n                })}\n              </div>\n              <AddCard\n                key={ele.id}\n                listId={ele.id}\n                boardId={finalId}\n                getCardsForList={getCardsForList}\n              />\n            </div>\n          )\n        })}\n        <AddList boardId={finalId} getBoardsLists={getBoardsLists} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}