{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport NavBar from '../components/NavBar';\nimport AddCard from '../components/AddCard';\nimport AddList from '../components/AddList';\nimport config from '../config/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const onlyId = id.split('').filter(ele => ele !== ':');\n  let finalId = '';\n  onlyId.map(ele => finalId += ele); // const [currentState, changeCurrentState] = useState('')\n\n  const [boardLists, getBoardsLists] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [load, checkLoad] = useState(true);\n  const [currentBoardName, setCurrentBoardName] = useState('');\n  const [currentListName, setCurrentListName] = useState('');\n  const [checkBoardName, setBoardName] = useState(false);\n  const [checkListName, setListName] = useState(false);\n  useEffect(async () => {\n    const getLists = await axios.get(`https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`);\n    getBoardsLists(getLists.data);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`);\n    const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n    setCurrentBoardName(getCurrentBoardName.data.name);\n    getCardsForList(getCards.data);\n    checkLoad(false);\n  }, []);\n\n  const handleBoardName = e => {\n    setCurrentBoardName(e.target.value);\n  };\n\n  const handleListName = e => {\n    setCurrentListName(e.target.value);\n  };\n\n  console.log(currentListName);\n\n  const updateBoardName = async e => {\n    e.preventDefault();\n\n    try {\n      await axios.put(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`);\n      const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n      setCurrentBoardName(getCurrentBoardName.data.name);\n      setBoardName(false);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const changeBoardState = () => {\n    setBoardName(true);\n  };\n\n  const titleToList = listName => {\n    return checkListName ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"update-board-name\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: updateBoardName,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: listName,\n          onChange: handleListName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Change Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: listName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  };\n\n  const boardName = checkBoardName ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"update-board-name\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateBoardName,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentBoardName,\n        onChange: handleBoardName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Change Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: currentBoardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n\n  if (load) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Wait Boards are loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board-page\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: changeBoardState,\n      className: \"current-board\",\n      children: boardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-board\",\n      children: [boardLists.map(ele => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-list-name\",\n            children: titleToList(ele.name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-cards\",\n            children: boardListCards.map(element => {\n              if (element.idList === ele.id) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: element.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 25\n                  }, this)\n                }, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 23\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {}, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 28\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            listId: ele.id,\n            boardId: finalId,\n            getCardsForList: getCardsForList\n          }, ele.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, ele.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddList, {\n        boardId: finalId,\n        getBoardsLists: getBoardsLists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"/jXjKOAow6XTgciucX0yEDhoO44=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","NavBar","AddCard","AddList","config","Dashboard","id","onlyId","split","filter","ele","finalId","map","boardLists","getBoardsLists","boardListCards","getCardsForList","load","checkLoad","currentBoardName","setCurrentBoardName","currentListName","setCurrentListName","checkBoardName","setBoardName","checkListName","setListName","getLists","get","key","token","data","getCards","getCurrentBoardName","name","handleBoardName","e","target","value","handleListName","console","log","updateBoardName","preventDefault","put","error","changeBoardState","titleToList","listName","boardName","element","idList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\nimport NavBar from '../components/NavBar'\nimport AddCard from '../components/AddCard'\nimport AddList from '../components/AddList'\nimport config from '../config/config'\n\nfunction Dashboard() {\n  const { id } = useParams()\n  const onlyId = id.split('').filter((ele) => ele !== ':')\n  let finalId = ''\n  onlyId.map((ele) => (finalId += ele))\n  // const [currentState, changeCurrentState] = useState('')\n  const [boardLists, getBoardsLists] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [load, checkLoad] = useState(true)\n  const [currentBoardName, setCurrentBoardName] = useState('')\n  const [currentListName, setCurrentListName] = useState('')\n  const [checkBoardName, setBoardName] = useState(false)\n  const [checkListName, setListName] = useState(false)\n  useEffect(async () => {\n    const getLists = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`\n    )\n    getBoardsLists(getLists.data)\n\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`\n    )\n\n    const getCurrentBoardName = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n    )\n    setCurrentBoardName(getCurrentBoardName.data.name)\n    getCardsForList(getCards.data)\n    checkLoad(false)\n  }, [])\n  const handleBoardName = (e) => {\n    setCurrentBoardName(e.target.value)\n  }\n  const handleListName = (e) => {\n    setCurrentListName(e.target.value)\n  }\n  console.log(currentListName)\n  const updateBoardName = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.put(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`\n      )\n      const getCurrentBoardName = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n      )\n      setCurrentBoardName(getCurrentBoardName.data.name)\n      setBoardName(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  const changeBoardState = () => {\n    setBoardName(true)\n  }\n  const titleToList = (listName) => {\n    return checkListName ? (\n      <div className=\"update-board-name\">\n        <form onSubmit={updateBoardName}>\n          <input type=\"text\" value={listName} onChange={handleListName}></input>\n          <input type=\"submit\" value=\"Change Name\"></input>\n        </form>\n      </div>\n    ) : (\n      <div>\n        <h1>{listName}</h1>\n      </div>\n    )\n  }\n  const boardName = checkBoardName ? (\n    <div className=\"update-board-name\">\n      <form onSubmit={updateBoardName}>\n        <input\n          type=\"text\"\n          value={currentBoardName}\n          onChange={handleBoardName}\n        ></input>\n        <input type=\"submit\" value=\"Change Name\"></input>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h1>{currentBoardName}</h1>\n    </div>\n  )\n\n  if (load) {\n    return <div>Wait Boards are loading</div>\n  }\n  return (\n    <div className=\"dash-board-page\">\n      <NavBar />\n      <div onClick={changeBoardState} className=\"current-board\">\n        {boardName}\n      </div>\n      <div className=\"dash-board\">\n        {boardLists.map((ele) => {\n          return (\n            <div key={ele.id} className=\"board-list-container\">\n              <div className=\"board-list-name\">{titleToList(ele.name)}</div>\n              <div className=\"list-cards\">\n                {boardListCards.map((element) => {\n                  if (element.idList === ele.id) {\n                    return (\n                      <div className=\"cards\" key={element.id}>\n                        <p>{element.name}</p>\n                      </div>\n                    )\n                  } else {\n                    return <div key={element.id}></div>\n                  }\n                })}\n              </div>\n              <AddCard\n                key={ele.id}\n                listId={ele.id}\n                boardId={finalId}\n                getCardsForList={getCardsForList}\n              />\n            </div>\n          )\n        })}\n        <AddList boardId={finalId} getBoardsLists={getBoardsLists} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}