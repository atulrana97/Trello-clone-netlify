{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport NavBar from '../components/NavBar';\nimport AddCard from '../components/AddCard';\nimport AddList from '../components/AddList';\nimport config from '../config/config';\nimport DashBoardCard from '../components/DashBoardCard';\nimport DashBoardLists from '../components/DashBoardLists';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const onlyId = id.split('').filter(ele => ele !== ':');\n  let finalId = '';\n  onlyId.map(ele => finalId += ele);\n  const [boardLists, getBoardsLists] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [load, checkLoad] = useState(true);\n  const [currentBoardName, setCurrentBoardName] = useState('');\n  const [currentBackgroundImage, setCurrentImage] = useState('');\n  const [checkBoardName, setBoardName] = useState(false);\n  const [isBackground, setBackground] = useState(false);\n  useEffect(async () => {\n    const getLists = await axios.get(`https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`);\n    getBoardsLists(getLists.data);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`);\n    getCardsForList(getCards.data);\n    const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n    setCurrentBoardName(getCurrentBoardName.data.name);\n\n    if (getCurrentBoardName.data.prefs.backgroundImage !== null) {\n      setCurrentImage(getCurrentBoardName.data.prefs.backgroundImage);\n      setBackground(true);\n    } else {\n      setCurrentImage(getCurrentBoardName.data.prefs.backgroundColor);\n      setBackground(false);\n    }\n\n    checkLoad(false);\n  }, []);\n\n  const handleBoardName = e => {\n    setCurrentBoardName(e.target.value);\n  };\n\n  const updateBoardName = async e => {\n    e.preventDefault();\n\n    try {\n      await axios.put(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`);\n      const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n      setCurrentBoardName(getCurrentBoardName.data.name);\n      setBoardName(false);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  console.log(currentBackgroundImage);\n\n  const changeBoardState = () => {\n    setBoardName(true);\n  };\n\n  const boardName = checkBoardName ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"update-board-name\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateBoardName,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentBoardName,\n        onChange: handleBoardName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Change Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: currentBoardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n  const backgroundSet = isBackground ? {\n    backgroundImage: `url(${currentBackgroundImage})`,\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat'\n  } : {\n    backgroundColor: {\n      currentBackgroundImage\n    }\n  };\n\n  if (load) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Wait Boards are loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board-page\",\n    style: backgroundSet,\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: changeBoardState,\n      className: \"current-board\",\n      children: boardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-board\",\n      children: [boardLists.map(ele => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(DashBoardLists, {\n            list: ele,\n            getBoardsLists: getBoardsLists\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-cards\",\n            children: boardListCards.map(element => {\n              if (element.idList === ele.id) {\n                return /*#__PURE__*/_jsxDEV(DashBoardCard, {\n                  card: element,\n                  getCardsForList: getCardsForList,\n                  boardId: finalId\n                }, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 23\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {}, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 28\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            listId: ele.id,\n            boardId: finalId,\n            getCardsForList: getCardsForList\n          }, ele.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, ele.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddList, {\n        boardId: finalId,\n        getBoardsLists: getBoardsLists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"Yhtj800oEi9zdwH4AsiOJmwE020=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","NavBar","AddCard","AddList","config","DashBoardCard","DashBoardLists","Dashboard","id","onlyId","split","filter","ele","finalId","map","boardLists","getBoardsLists","boardListCards","getCardsForList","load","checkLoad","currentBoardName","setCurrentBoardName","currentBackgroundImage","setCurrentImage","checkBoardName","setBoardName","isBackground","setBackground","getLists","get","key","token","data","getCards","getCurrentBoardName","name","prefs","backgroundImage","backgroundColor","handleBoardName","e","target","value","updateBoardName","preventDefault","put","console","error","log","changeBoardState","boardName","backgroundSet","backgroundPosition","backgroundSize","backgroundRepeat","element","idList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\nimport NavBar from '../components/NavBar'\nimport AddCard from '../components/AddCard'\nimport AddList from '../components/AddList'\nimport config from '../config/config'\nimport DashBoardCard from '../components/DashBoardCard'\nimport DashBoardLists from '../components/DashBoardLists'\n\nfunction Dashboard() {\n  const { id } = useParams()\n  const onlyId = id.split('').filter((ele) => ele !== ':')\n  let finalId = ''\n  onlyId.map((ele) => (finalId += ele))\n\n  const [boardLists, getBoardsLists] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [load, checkLoad] = useState(true)\n  const [currentBoardName, setCurrentBoardName] = useState('')\n  const [currentBackgroundImage, setCurrentImage] = useState('')\n\n  const [checkBoardName, setBoardName] = useState(false)\n\n  const [isBackground, setBackground] = useState(false)\n  useEffect(async () => {\n    const getLists = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`\n    )\n    getBoardsLists(getLists.data)\n\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`\n    )\n    getCardsForList(getCards.data)\n\n    const getCurrentBoardName = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n    )\n    setCurrentBoardName(getCurrentBoardName.data.name)\n    if (getCurrentBoardName.data.prefs.backgroundImage !== null) {\n      setCurrentImage(getCurrentBoardName.data.prefs.backgroundImage)\n      setBackground(true)\n    } else {\n      setCurrentImage(getCurrentBoardName.data.prefs.backgroundColor)\n      setBackground(false)\n    }\n\n    checkLoad(false)\n  }, [])\n  const handleBoardName = (e) => {\n    setCurrentBoardName(e.target.value)\n  }\n\n  const updateBoardName = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.put(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`\n      )\n      const getCurrentBoardName = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n      )\n      setCurrentBoardName(getCurrentBoardName.data.name)\n      setBoardName(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  console.log(currentBackgroundImage)\n  const changeBoardState = () => {\n    setBoardName(true)\n  }\n\n  const boardName = checkBoardName ? (\n    <div className=\"update-board-name\">\n      <form onSubmit={updateBoardName}>\n        <input\n          type=\"text\"\n          value={currentBoardName}\n          onChange={handleBoardName}\n        ></input>\n        <input type=\"submit\" value=\"Change Name\"></input>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h1>{currentBoardName}</h1>\n    </div>\n  )\n  const backgroundSet = isBackground\n    ? {\n        backgroundImage: `url(${currentBackgroundImage})`,\n        backgroundPosition: 'center',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat'\n      }\n    : { backgroundColor: { currentBackgroundImage } }\n\n  if (load) {\n    return <div>Wait Boards are loading</div>\n  }\n  return (\n    <div className=\"dash-board-page\" style={backgroundSet}>\n      <NavBar />\n      <div onClick={changeBoardState} className=\"current-board\">\n        {boardName}\n      </div>\n      <div className=\"dash-board\">\n        {boardLists.map((ele) => {\n          return (\n            <div key={ele.id} className=\"board-list-container\">\n              <DashBoardLists list={ele} getBoardsLists={getBoardsLists} />\n              <div className=\"list-cards\">\n                {boardListCards.map((element) => {\n                  if (element.idList === ele.id) {\n                    return (\n                      <DashBoardCard\n                        key={element.id}\n                        card={element}\n                        getCardsForList={getCardsForList}\n                        boardId={finalId}\n                      />\n                    )\n                  } else {\n                    return <div key={element.id}></div>\n                  }\n                })}\n              </div>\n              <AddCard\n                key={ele.id}\n                listId={ele.id}\n                boardId={finalId}\n                getCardsForList={getCardsForList}\n              />\n            </div>\n          )\n        })}\n        <AddList boardId={finalId} getBoardsLists={getBoardsLists} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}