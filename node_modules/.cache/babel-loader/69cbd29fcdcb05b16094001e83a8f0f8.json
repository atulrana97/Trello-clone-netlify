{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { MdDelete } from 'react-icons/md';\nimport axios from 'axios';\nimport config from '../config/config';\nimport PropTypes from 'prop-types';\nimport '../task2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashBoardCard({\n  card,\n  getCardsForList,\n  boardId\n}) {\n  _s();\n\n  const [currentCardName, updateCurrentCard] = useState(card.name);\n\n  const deleteCard = async cardId => {\n    await axios.delete(`https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`);\n    getCardsForList(getCards.data);\n  };\n\n  const updateCard = async (e, cardId) => {\n    e.preventDefault();\n    await axios.put(`https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}&name=${currentCardName}`);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`);\n    getCardsForList(getCards.data);\n  };\n\n  const handleCardChange = e => {\n    updateCurrentCard(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-card\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"update-card-form\",\n          \"data-testid\": \"updateForm\",\n          onSubmit: e => updateCard(e, card.id),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"current-card-title\",\n            \"data-testid\": \"updateCardInputField\",\n            value: currentCardName // onClick={() => setSubmit(true)}\n            ,\n            onChange: e => handleCardChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"update\",\n            className: \"update-card-button\",\n            \"data-testid\": \"updateCardSubmitButton\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-icons\",\n        children: /*#__PURE__*/_jsxDEV(MdDelete, {\n          onClick: () => deleteCard(card.id),\n          \"data-testid\": \"deleteIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DashBoardCard, \"4DUDpuoMgxQH4aGmsGzaRB9aYIc=\");\n\n_c = DashBoardCard;\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n};\nexport default DashBoardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashBoardCard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardCard.js"],"names":["React","useState","MdDelete","axios","config","PropTypes","DashBoardCard","card","getCardsForList","boardId","currentCardName","updateCurrentCard","name","deleteCard","cardId","delete","key","token","getCards","get","data","updateCard","e","preventDefault","put","handleCardChange","target","value","id","propTypes","object","func","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { MdDelete } from 'react-icons/md'\nimport axios from 'axios'\nimport config from '../config/config'\nimport PropTypes from 'prop-types'\nimport '../task2.css'\n\nfunction DashBoardCard({ card, getCardsForList, boardId }) {\n  const [currentCardName, updateCurrentCard] = useState(card.name)\n\n  const deleteCard = async (cardId) => {\n    await axios.delete(\n      `https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`\n    )\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`\n    )\n    getCardsForList(getCards.data)\n  }\n  const updateCard = async (e, cardId) => {\n    e.preventDefault()\n    await axios.put(\n      `https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}&name=${currentCardName}`\n    )\n\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`\n    )\n    getCardsForList(getCards.data)\n  }\n\n  const handleCardChange = (e) => {\n    updateCurrentCard(e.target.value)\n  }\n  return (\n    <div>\n      <div className=\"cards\" key={card.id}>\n        <div className=\"update-card\" key={card.id}>\n          <form\n            key={card.id}\n            className=\"update-card-form\"\n            data-testid=\"updateForm\"\n            onSubmit={(e) => updateCard(e, card.id)}\n          >\n            <input\n              type=\"text\"\n              className=\"current-card-title\"\n              data-testid=\"updateCardInputField\"\n              value={currentCardName}\n              // onClick={() => setSubmit(true)}\n              onChange={(e) => handleCardChange(e)}\n            ></input>\n            <input\n              type=\"submit\"\n              value=\"update\"\n              className=\"update-card-button\"\n              data-testid=\"updateCardSubmitButton\"\n            />\n          </form>\n        </div>\n        <div className=\"card-icons\">\n          <MdDelete\n            onClick={() => deleteCard(card.id)}\n            data-testid=\"deleteIcon\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n}\n\nexport default DashBoardCard\n"]},"metadata":{},"sourceType":"module"}