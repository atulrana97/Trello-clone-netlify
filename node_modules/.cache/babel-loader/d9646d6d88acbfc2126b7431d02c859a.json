{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardLists.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport config from '../config/config';\nimport { BsThreeDots } from 'react-icons/bs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashBoardLists({\n  list,\n  getBoardsLists\n}) {\n  _s();\n\n  const [currentListName, setCurrentListName] = useState(list.name);\n  const [submitForm, setSubmit] = useState(false);\n  const [loadingUpdate, setLoadingUpdate] = useState(false);\n\n  const listChangeHandler = e => {\n    setCurrentListName(e.target.value);\n  };\n\n  const updateListName = async (e, listId) => {\n    e.preventDefault();\n    setLoadingUpdate(true);\n    await axios.put(`https://api.trello.com/1/lists/${listId}?key=${config.key}&token=${config.token}&name=${currentListName}`);\n    const getLists = await axios.get(`https://api.trello.com/1/boards/${list.idBoard}/lists?key=${config.key}&token=${config.token}`);\n    getBoardsLists(getLists.data);\n    setLoadingUpdate(false);\n    setSubmit(false);\n  };\n\n  const archiveList = async listId => {\n    await axios.put(`https://api.trello.com/1/lists/${listId}/closed?key=${config.key}&token=${config.token}&value=true`);\n    const getLists = await axios.get(`https://api.trello.com/1/boards/${list.idBoard}/lists?key=${config.key}&token=${config.token}`);\n    getBoardsLists(getLists.data);\n  };\n\n  const inputField = loadingUpdate ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"update-card-loading\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: currentListName,\n    \"data-testid\": \"listNameInputField\",\n    onChange: e => {\n      listChangeHandler(e);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-name-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-list-name\",\n      \"data-testid\": \"openListForm\",\n      onClick: () => {\n        if (submitForm) {\n          setCurrentListName(list.name);\n          setSubmit(false);\n        } else {\n          setSubmit(true);\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          updateListName(e, list.id);\n        },\n        children: [inputField, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"update\",\n          \"data-testid\": \"updateListSubmitButton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"archive-list-button\",\n      children: /*#__PURE__*/_jsxDEV(BsThreeDots, {\n        onClick: () => archiveList(list.id),\n        \"data-testid\": \"archiveListButton\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DashBoardLists, \"edve+8oHq6N9jaAz4bJ0Nb48jmA=\");\n\n_c = DashBoardLists;\nDashBoardLists.propTypes = {\n  list: PropTypes.object,\n  getBoardsLists: PropTypes.func\n};\nexport default DashBoardLists;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashBoardLists\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardLists.js"],"names":["React","useState","PropTypes","axios","config","BsThreeDots","DashBoardLists","list","getBoardsLists","currentListName","setCurrentListName","name","submitForm","setSubmit","loadingUpdate","setLoadingUpdate","listChangeHandler","e","target","value","updateListName","listId","preventDefault","put","key","token","getLists","get","idBoard","data","archiveList","inputField","id","propTypes","object","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios'\nimport config from '../config/config'\nimport { BsThreeDots } from 'react-icons/bs'\n\nfunction DashBoardLists({ list, getBoardsLists }) {\n  const [currentListName, setCurrentListName] = useState(list.name)\n  const [submitForm, setSubmit] = useState(false)\n  const [loadingUpdate, setLoadingUpdate] = useState(false)\n  const listChangeHandler = (e) => {\n    setCurrentListName(e.target.value)\n  }\n  const updateListName = async (e, listId) => {\n    e.preventDefault()\n    setLoadingUpdate(true)\n    await axios.put(\n      `https://api.trello.com/1/lists/${listId}?key=${config.key}&token=${config.token}&name=${currentListName}`\n    )\n    const getLists = await axios.get(\n      `https://api.trello.com/1/boards/${list.idBoard}/lists?key=${config.key}&token=${config.token}`\n    )\n    getBoardsLists(getLists.data)\n    setLoadingUpdate(false)\n    setSubmit(false)\n  }\n  const archiveList = async (listId) => {\n    await axios.put(\n      `https://api.trello.com/1/lists/${listId}/closed?key=${config.key}&token=${config.token}&value=true`\n    )\n    const getLists = await axios.get(\n      `https://api.trello.com/1/boards/${list.idBoard}/lists?key=${config.key}&token=${config.token}`\n    )\n    getBoardsLists(getLists.data)\n  }\n  const inputField = loadingUpdate ? (\n    <div className=\"update-card-loading\">\n      <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\" />\n    </div>\n  ) : (\n    <input\n      type=\"text\"\n      value={currentListName}\n      data-testid=\"listNameInputField\"\n      onChange={(e) => {\n        listChangeHandler(e)\n      }}\n    />\n  )\n  return (\n    <div className=\"list-name-container\">\n      <div\n        className=\"board-list-name\"\n        data-testid=\"openListForm\"\n        onClick={() => {\n          if (submitForm) {\n            setCurrentListName(list.name)\n            setSubmit(false)\n          } else {\n            setSubmit(true)\n          }\n        }}\n      >\n        <form\n          onSubmit={(e) => {\n            updateListName(e, list.id)\n          }}\n        >\n          {inputField}\n          <input\n            type=\"submit\"\n            value=\"update\"\n            data-testid=\"updateListSubmitButton\"\n          />\n        </form>\n      </div>\n      <div className=\"archive-list-button\">\n        <BsThreeDots\n          onClick={() => archiveList(list.id)}\n          data-testid=\"archiveListButton\"\n        />\n      </div>\n    </div>\n  )\n}\nDashBoardLists.propTypes = {\n  list: PropTypes.object,\n  getBoardsLists: PropTypes.func\n}\nexport default DashBoardLists\n"]},"metadata":{},"sourceType":"module"}