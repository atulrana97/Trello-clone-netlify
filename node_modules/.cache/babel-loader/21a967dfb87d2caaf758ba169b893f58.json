{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport NavBar from '../components/NavBar';\nimport AddCard from '../components/AddCard';\nimport AddList from '../components/AddList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const onlyId = id.split('').filter(ele => ele !== ':');\n  let finalId = '';\n  onlyId.map(ele => finalId += ele);\n  const [currentState, changeCurrentState] = useState('');\n  const [boardLists, getBoards] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [load, checkLoad] = useState(true);\n  useEffect(async () => {\n    const listLink = `https://api.trello.com/1/boards/${finalId}/lists?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`;\n    const getLists = await axios.get(listLink);\n    getBoards(getLists.data);\n    const cardLink = `https://api.trello.com/1/boards/${finalId}/cards?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`;\n    const getCards = await axios.get(cardLink);\n    getCardsForList(getCards.data);\n    checkLoad(false);\n  }, []);\n\n  const handleChange = async (e, id) => {\n    e.preventDefault();\n    changeCurrentState(e.target.value);\n    boardListCards.map(ele => {\n      if (ele.id === id) {\n        ele.name = currentState;\n      }\n\n      return ele;\n    });\n  };\n\n  console.log(boardListCards);\n\n  if (load) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Wait Boards are loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n\n  console.log(boardLists);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board-page\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-board\",\n      children: [boardLists.map(ele => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-list-name\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: ele.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-cards\",\n            children: boardListCards.map(element => {\n              if (element.idList === ele.id) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    value: element.name,\n                    onChange: e => handleChange(e, element.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 60,\n                    columnNumber: 25\n                  }, this)\n                }, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 23\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {}, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 28\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AddCard, {\n            listId: ele.id\n          }, ele.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)]\n        }, ele.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddList, {\n        boardId: finalId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"yx1uGPB/tVpx8NEu1F088Sf4ybY=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","NavBar","AddCard","AddList","Dashboard","id","onlyId","split","filter","ele","finalId","map","currentState","changeCurrentState","boardLists","getBoards","boardListCards","getCardsForList","load","checkLoad","listLink","getLists","get","data","cardLink","getCards","handleChange","e","preventDefault","target","value","name","console","log","element","idList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\nimport NavBar from '../components/NavBar'\nimport AddCard from '../components/AddCard'\nimport AddList from '../components/AddList'\n\nfunction Dashboard() {\n  const { id } = useParams()\n  const onlyId = id.split('').filter((ele) => ele !== ':')\n  let finalId = ''\n  onlyId.map((ele) => (finalId += ele))\n  const [currentState, changeCurrentState] = useState('')\n  const [boardLists, getBoards] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [load, checkLoad] = useState(true)\n  useEffect(async () => {\n    const listLink = `https://api.trello.com/1/boards/${finalId}/lists?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`\n\n    const getLists = await axios.get(listLink)\n    getBoards(getLists.data)\n\n    const cardLink = `https://api.trello.com/1/boards/${finalId}/cards?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`\n    const getCards = await axios.get(cardLink)\n    getCardsForList(getCards.data)\n    checkLoad(false)\n  }, [])\n\n  const handleChange = async (e, id) => {\n    e.preventDefault()\n    changeCurrentState(e.target.value)\n    boardListCards.map((ele) => {\n      if (ele.id === id) {\n        ele.name = currentState\n      }\n      return ele\n    })\n  }\n  console.log(boardListCards)\n  if (load) {\n    return <div>Wait Boards are loading</div>\n  }\n  console.log(boardLists)\n  return (\n    <div className=\"dash-board-page\">\n      <NavBar />\n      <div className=\"dash-board\">\n        {boardLists.map((ele) => {\n          return (\n            <div key={ele.id} className=\"board-list-container\">\n              <div className=\"board-list-name\">\n                <h1>{ele.name}</h1>\n              </div>\n              <div className=\"list-cards\">\n                {boardListCards.map((element) => {\n                  if (element.idList === ele.id) {\n                    return (\n                      <div className=\"cards\" key={element.id}>\n                        <input\n                          type=\"text\"\n                          value={element.name}\n                          onChange={(e) => handleChange(e, element.id)}\n                        />\n                      </div>\n                    )\n                  } else {\n                    return <div key={element.id}></div>\n                  }\n                })}\n              </div>\n              <AddCard key={ele.id} listId={ele.id} />\n            </div>\n          )\n        })}\n        <AddList boardId={finalId} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}