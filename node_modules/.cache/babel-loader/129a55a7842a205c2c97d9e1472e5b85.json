{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { MdDelete } from 'react-icons/md';\nimport axios from 'axios';\nimport config from '../config/config';\nimport PropTypes from 'prop-types';\nimport '../task2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashBoardCard({\n  card,\n  getCardsForList,\n  boardId\n}) {\n  _s();\n\n  const [currentCardName, updateCurrentCard] = useState(card.name);\n  const [submitForm, setSubmit] = useState(false);\n\n  const deleteCard = async cardId => {\n    await axios.delete(`https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`);\n    getCardsForList(getCards.data);\n  };\n\n  const updateCard = async (e, cardId) => {\n    e.preventDefault();\n    console.log('in update card');\n    await axios.put(`https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}&name=${currentCardName}`);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`);\n    getCardsForList(getCards.data);\n    setSubmit(false);\n  };\n\n  const handleCardChange = e => {\n    updateCurrentCard(e.target.value);\n  }; //   const submitButton =\n\n\n  console.log(submitForm);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-card\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"update-card-form\",\n          \"data-testid\": \"updateForm\",\n          onSubmit: e => updateCard(e, card.id),\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"current-card-title\",\n            \"data-testid\": \"updateCardInputField\",\n            value: currentCardName,\n            onClick: () => setSubmit(true),\n            onChange: e => handleCardChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-icons\",\n        children: /*#__PURE__*/_jsxDEV(MdDelete, {\n          onClick: () => deleteCard(card.id),\n          \"data-testid\": \"deleteIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DashBoardCard, \"70HXk3V35TvOna6PzH/DOZZe5eA=\");\n\n_c = DashBoardCard;\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n};\nexport default DashBoardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashBoardCard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardCard.js"],"names":["React","useState","MdDelete","axios","config","PropTypes","DashBoardCard","card","getCardsForList","boardId","currentCardName","updateCurrentCard","name","submitForm","setSubmit","deleteCard","cardId","delete","key","token","getCards","get","data","updateCard","e","preventDefault","console","log","put","handleCardChange","target","value","id","propTypes","object","func","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { MdDelete } from 'react-icons/md'\nimport axios from 'axios'\nimport config from '../config/config'\nimport PropTypes from 'prop-types'\nimport '../task2.css'\n\nfunction DashBoardCard({ card, getCardsForList, boardId }) {\n  const [currentCardName, updateCurrentCard] = useState(card.name)\n  const [submitForm, setSubmit] = useState(false)\n  const deleteCard = async (cardId) => {\n    await axios.delete(\n      `https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`\n    )\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`\n    )\n    getCardsForList(getCards.data)\n  }\n  const updateCard = async (e, cardId) => {\n    e.preventDefault()\n    console.log('in update card')\n    await axios.put(\n      `https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}&name=${currentCardName}`\n    )\n\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`\n    )\n    getCardsForList(getCards.data)\n    setSubmit(false)\n  }\n\n  const handleCardChange = (e) => {\n    updateCurrentCard(e.target.value)\n  }\n  //   const submitButton =\n  console.log(submitForm)\n  return (\n    <div>\n      <div className=\"cards\" key={card.id}>\n        <div className=\"update-card\" key={card.id}>\n          <form\n            key={card.id}\n            className=\"update-card-form\"\n            data-testid=\"updateForm\"\n            onSubmit={(e) => updateCard(e, card.id)}\n          >\n            <input\n              type=\"text\"\n              className=\"current-card-title\"\n              data-testid=\"updateCardInputField\"\n              value={currentCardName}\n              onClick={() => setSubmit(true)}\n              onChange={(e) => handleCardChange(e)}\n            ></input>\n          </form>\n        </div>\n        <div className=\"card-icons\">\n          <MdDelete\n            onClick={() => deleteCard(card.id)}\n            data-testid=\"deleteIcon\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n}\n\nexport default DashBoardCard\n"]},"metadata":{},"sourceType":"module"}