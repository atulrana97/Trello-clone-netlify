{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport NavBar from '../components/NavBar';\nimport AddCard from '../components/AddCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const onlyId = id.split('').filter(ele => ele !== ':');\n  let finalId = '';\n  onlyId.map(ele => finalId += ele);\n  const [currentState, changeCurrentState] = useState('');\n  const [boardLists, getBoards] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [load, checkLoad] = useState(true);\n  useEffect(async () => {\n    const listLink = `https://api.trello.com/1/boards/${finalId}/lists?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`;\n    console.log(listLink);\n    const getLists = await axios.get(listLink);\n    getBoards(getLists.data);\n    const cardLink = `https://api.trello.com/1/boards/${finalId}/cards?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`;\n    const getCards = await axios.get(cardLink);\n    getCardsForList(getCards.data);\n    checkLoad(false);\n  }, []);\n  console.log(boardListCards);\n\n  const handleChange = async (e, id) => {\n    e.preventDefault();\n    changeCurrentState(e.target.value);\n    boardListCards.map(ele => {\n      if (ele.id === id) {\n        ele.name = currentState;\n      }\n\n      return ele;\n    });\n  };\n\n  if (load) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Wait Boards are loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board-page\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dash-board\",\n        children: boardLists.map(ele => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-list-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"board-list-name\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: ele.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this)\n            }, ele.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-cards\",\n              children: boardListCards.map(element => {\n                if (element.idList === ele.id) {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"cards\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      value: element.name,\n                      onChange: e => handleChange(e, element.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 57,\n                      columnNumber: 27\n                    }, this)\n                  }, element.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 25\n                  }, this);\n                } else {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {}, ele.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 65,\n                    columnNumber: 30\n                  }, this);\n                }\n              })\n            }, ele.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(AddCard, {}, ele.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)]\n          }, ele.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"yx1uGPB/tVpx8NEu1F088Sf4ybY=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","NavBar","AddCard","Dashboard","id","onlyId","split","filter","ele","finalId","map","currentState","changeCurrentState","boardLists","getBoards","boardListCards","getCardsForList","load","checkLoad","listLink","console","log","getLists","get","data","cardLink","getCards","handleChange","e","preventDefault","target","value","name","element","idList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\nimport NavBar from '../components/NavBar'\nimport AddCard from '../components/AddCard'\n\nfunction Dashboard() {\n  const { id } = useParams()\n  const onlyId = id.split('').filter((ele) => ele !== ':')\n  let finalId = ''\n  onlyId.map((ele) => (finalId += ele))\n  const [currentState, changeCurrentState] = useState('')\n  const [boardLists, getBoards] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [load, checkLoad] = useState(true)\n  useEffect(async () => {\n    const listLink = `https://api.trello.com/1/boards/${finalId}/lists?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`\n    console.log(listLink)\n    const getLists = await axios.get(listLink)\n    getBoards(getLists.data)\n    const cardLink = `https://api.trello.com/1/boards/${finalId}/cards?key=4771cda06157329944b577f382bc2cf3&token=7a1c5dce94fc3f0026f3df596e11727bbb51730447ebc0e0f3732ccca73c5e86`\n    const getCards = await axios.get(cardLink)\n    getCardsForList(getCards.data)\n    checkLoad(false)\n  }, [])\n  console.log(boardListCards)\n  const handleChange = async (e, id) => {\n    e.preventDefault()\n    changeCurrentState(e.target.value)\n    boardListCards.map((ele) => {\n      if (ele.id === id) {\n        ele.name = currentState\n      }\n      return ele\n    })\n  }\n  if (load) {\n    return <div>Wait Boards are loading</div>\n  }\n  return (\n    <div className=\"dash-board-page\">\n      <NavBar />\n      <div>\n        <div className=\"dash-board\">\n          {boardLists.map((ele) => {\n            return (\n              <div key={ele.id} className=\"board-list-container\">\n                <div key={ele.id} className=\"board-list-name\">\n                  <h1>{ele.name}</h1>\n                </div>\n                <div className=\"list-cards\" key={ele.id}>\n                  {boardListCards.map((element) => {\n                    if (element.idList === ele.id) {\n                      return (\n                        <div className=\"cards\" key={element.id}>\n                          <input\n                            type=\"text\"\n                            value={element.name}\n                            onChange={(e) => handleChange(e, element.id)}\n                          />\n                        </div>\n                      )\n                    } else {\n                      return <div key={ele.id}></div>\n                    }\n                  })}\n                </div>\n                <AddCard key={ele.id} />\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}