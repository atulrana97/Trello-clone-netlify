{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { MdDelete } from 'react-icons/md';\nimport axios from 'axios';\nimport config from '../config/config';\nimport PropTypes from 'prop-types';\nimport '../task2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashBoardCard({\n  card,\n  getCardsForList,\n  boardId\n}) {\n  _s();\n\n  const [currentCardName, updateCurrentCard] = useState(card.name);\n  const [loadingUpdate, setLoadingUpdate] = useState(false);\n\n  const deleteCard = async cardId => {\n    await axios.delete(`https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`);\n    getCardsForList(getCards.data);\n  };\n\n  const updateCard = async (e, cardId) => {\n    e.preventDefault();\n    setLoadingUpdate(true);\n    await axios.put(`https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}&name=${currentCardName}`);\n    const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`);\n    setLoadingUpdate(false);\n    getCardsForList(getCards.data);\n  };\n\n  const inputField = loadingUpdate ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"update-card-loading\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    className: \"current-card-title\",\n    \"data-testid\": \"updateCardInputField\",\n    value: currentCardName // onClick={() => setSubmit(true)}\n    ,\n    onChange: e => handleCardChange(e)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n\n  const handleCardChange = e => {\n    updateCurrentCard(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-card\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"update-card-form\",\n          \"data-testid\": \"updateForm\",\n          onSubmit: e => updateCard(e, card.id),\n          children: [inputField, /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"update\",\n            className: \"update-card-button\",\n            \"data-testid\": \"updateCardSubmitButton\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, card.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-icons\",\n        children: /*#__PURE__*/_jsxDEV(MdDelete, {\n          onClick: () => deleteCard(card.id),\n          \"data-testid\": \"deleteIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DashBoardCard, \"JAgkxMHmGmGDm9jZHv24VYsPjIY=\");\n\n_c = DashBoardCard;\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n};\nexport default DashBoardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashBoardCard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardCard.js"],"names":["React","useState","MdDelete","axios","config","PropTypes","DashBoardCard","card","getCardsForList","boardId","currentCardName","updateCurrentCard","name","loadingUpdate","setLoadingUpdate","deleteCard","cardId","delete","key","token","getCards","get","data","updateCard","e","preventDefault","put","inputField","handleCardChange","target","value","id","propTypes","object","func","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { MdDelete } from 'react-icons/md'\nimport axios from 'axios'\nimport config from '../config/config'\nimport PropTypes from 'prop-types'\nimport '../task2.css'\n\nfunction DashBoardCard({ card, getCardsForList, boardId }) {\n  const [currentCardName, updateCurrentCard] = useState(card.name)\n  const [loadingUpdate, setLoadingUpdate] = useState(false)\n\n  const deleteCard = async (cardId) => {\n    await axios.delete(\n      `https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}`\n    )\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`\n    )\n    getCardsForList(getCards.data)\n  }\n  const updateCard = async (e, cardId) => {\n    e.preventDefault()\n    setLoadingUpdate(true)\n    await axios.put(\n      `https://api.trello.com/1/cards/${cardId}?key=${config.key}&token=${config.token}&name=${currentCardName}`\n    )\n\n    const getCards = await axios.get(\n      `https://api.trello.com/1/boards/${boardId}/cards?key=${config.key}&token=${config.token}`\n    )\n    setLoadingUpdate(false)\n    getCardsForList(getCards.data)\n  }\n  const inputField = loadingUpdate ? (\n    <div className=\"update-card-loading\">\n      <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\" />\n      )\n    </div>\n  ) : (\n    <input\n      type=\"text\"\n      className=\"current-card-title\"\n      data-testid=\"updateCardInputField\"\n      value={currentCardName}\n      // onClick={() => setSubmit(true)}\n      onChange={(e) => handleCardChange(e)}\n    ></input>\n  )\n\n  const handleCardChange = (e) => {\n    updateCurrentCard(e.target.value)\n  }\n  return (\n    <div>\n      <div className=\"cards\" key={card.id}>\n        <div className=\"update-card\" key={card.id}>\n          <form\n            key={card.id}\n            className=\"update-card-form\"\n            data-testid=\"updateForm\"\n            onSubmit={(e) => updateCard(e, card.id)}\n          >\n            {inputField}\n            <input\n              type=\"submit\"\n              value=\"update\"\n              className=\"update-card-button\"\n              data-testid=\"updateCardSubmitButton\"\n            />\n          </form>\n        </div>\n        <div className=\"card-icons\">\n          <MdDelete\n            onClick={() => deleteCard(card.id)}\n            data-testid=\"deleteIcon\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n}\n\nexport default DashBoardCard\n"]},"metadata":{},"sourceType":"module"}