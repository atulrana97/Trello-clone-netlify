{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios'; // import { FaCheck } from 'react-icons/fa'\n\nimport AddCard from '../components/AddCard';\nimport AddList from '../components/AddList';\nimport config from '../config/config';\nimport DashBoardCard from '../components/DashBoardCard';\nimport DashBoardLists from '../components/DashBoardLists';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    finalId\n  } = useParams();\n  const [boardLists, getBoardsLists] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [currentBoardName, setCurrentBoardName] = useState('');\n  const [currentBackgroundImage, setCurrentImage] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [checkBoardName, setBoardName] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const getLists = await axios.get(`https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`);\n      const getCards = await axios.get(`https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`);\n      const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n      setLoading(false);\n      setCurrentBoardName(getCurrentBoardName.data.name);\n      getCardsForList(getCards.data);\n      getBoardsLists(getLists.data);\n      setCurrentImage(getCurrentBoardName.data.prefs);\n    };\n\n    fetchData();\n  }, []);\n\n  const handleBoardName = e => {\n    setCurrentBoardName(e.target.value);\n  };\n\n  const updateBoardName = async e => {\n    e.preventDefault();\n    await axios.put(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`);\n    const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n    setCurrentBoardName(getCurrentBoardName.data.name);\n    setBoardName(false);\n  };\n\n  const changeBoardState = () => {\n    if (checkBoardName === true) {\n      setBoardName(false);\n    } else {\n      setBoardName(true);\n    }\n  };\n\n  const boardName = checkBoardName ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"update-board-name\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateBoardName,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentBoardName,\n        onChange: handleBoardName,\n        \"data-testid\": \"updateFormInputField\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"update\",\n        \"data-testid\": \"updateFormSubmitButton\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"cancel\",\n      onClick: changeBoardState,\n      \"data-testid\": \"cancel\",\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: changeBoardState,\n    \"data-testid\": \"openBoardNameUpdateForm\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      \"data-testid\": currentBoardName,\n      children: currentBoardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n  const backgroundSet = {\n    backgroundImage: `url(${currentBackgroundImage.backgroundImage})`,\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: `${currentBackgroundImage.backgroundColor}`\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      \"data-testid\": \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board-page\",\n    style: backgroundSet,\n    \"data-testid\": \"pageBackground\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-board\",\n      children: boardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-board\",\n      children: [boardLists.map(ele => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(DashBoardLists, {\n            list: ele,\n            getBoardsLists: getBoardsLists\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-cards\",\n            children: boardListCards.map(element => {\n              if (element.idList === ele.id) {\n                return /*#__PURE__*/_jsxDEV(DashBoardCard, {\n                  card: element,\n                  getCardsForList: getCardsForList,\n                  boardId: finalId\n                }, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 23\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {}, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 28\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(AddCard, {\n              listId: ele.id,\n              boardId: finalId,\n              getCardsForList: getCardsForList\n            }, ele.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, ele.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddList, {\n        boardId: finalId,\n        getBoardsLists: getBoardsLists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"jHPU1D6ClyjaC4JDMNL+V9zYEYs=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","AddCard","AddList","config","DashBoardCard","DashBoardLists","Dashboard","finalId","boardLists","getBoardsLists","boardListCards","getCardsForList","currentBoardName","setCurrentBoardName","currentBackgroundImage","setCurrentImage","loading","setLoading","checkBoardName","setBoardName","fetchData","getLists","get","key","token","getCards","getCurrentBoardName","data","name","prefs","handleBoardName","e","target","value","updateBoardName","preventDefault","put","changeBoardState","boardName","backgroundSet","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backgroundColor","map","ele","element","idList","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\n// import { FaCheck } from 'react-icons/fa'\nimport AddCard from '../components/AddCard'\nimport AddList from '../components/AddList'\nimport config from '../config/config'\nimport DashBoardCard from '../components/DashBoardCard'\nimport DashBoardLists from '../components/DashBoardLists'\n\nfunction Dashboard() {\n  const { finalId } = useParams()\n\n  const [boardLists, getBoardsLists] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [currentBoardName, setCurrentBoardName] = useState('')\n  const [currentBackgroundImage, setCurrentImage] = useState({})\n  const [loading, setLoading] = useState(true)\n  const [checkBoardName, setBoardName] = useState(false)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const getLists = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`\n      )\n\n      const getCards = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`\n      )\n\n      const getCurrentBoardName = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n      )\n\n      setLoading(false)\n      setCurrentBoardName(getCurrentBoardName.data.name)\n      getCardsForList(getCards.data)\n      getBoardsLists(getLists.data)\n      setCurrentImage(getCurrentBoardName.data.prefs)\n    }\n    fetchData()\n  }, [])\n\n  const handleBoardName = (e) => {\n    setCurrentBoardName(e.target.value)\n  }\n  const updateBoardName = async (e) => {\n    e.preventDefault()\n    await axios.put(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`\n    )\n    const getCurrentBoardName = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n    )\n    setCurrentBoardName(getCurrentBoardName.data.name)\n    setBoardName(false)\n  }\n  const changeBoardState = () => {\n    if (checkBoardName === true) {\n      setBoardName(false)\n    } else {\n      setBoardName(true)\n    }\n  }\n\n  const boardName = checkBoardName ? (\n    <div className=\"update-board-name\">\n      <form onSubmit={updateBoardName}>\n        <input\n          type=\"text\"\n          value={currentBoardName}\n          onChange={handleBoardName}\n          data-testid=\"updateFormInputField\"\n        ></input>\n        <input\n          type=\"submit\"\n          value=\"update\"\n          data-testid=\"updateFormSubmitButton\"\n        />\n      </form>\n      <h1 className=\"cancel\" onClick={changeBoardState} data-testid=\"cancel\">\n        X\n      </h1>\n    </div>\n  ) : (\n    <div onClick={changeBoardState} data-testid=\"openBoardNameUpdateForm\">\n      <h1 data-testid={currentBoardName}>{currentBoardName}</h1>\n    </div>\n  )\n  const backgroundSet = {\n    backgroundImage: `url(${currentBackgroundImage.backgroundImage})`,\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: `${currentBackgroundImage.backgroundColor}`\n  }\n\n  if (loading) {\n    return (\n      <div className=\"loading\" data-testid=\"loading\">\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif\" />\n      </div>\n    )\n  }\n  return (\n    <div\n      className=\"dash-board-page\"\n      style={backgroundSet}\n      data-testid=\"pageBackground\"\n    >\n      <div className=\"current-board\">{boardName}</div>\n      <div className=\"dash-board\">\n        {boardLists.map((ele) => {\n          return (\n            <div key={ele.id} className=\"board-list-container\">\n              <DashBoardLists list={ele} getBoardsLists={getBoardsLists} />\n              <div className=\"list-cards\">\n                {boardListCards.map((element) => {\n                  if (element.idList === ele.id) {\n                    return (\n                      <DashBoardCard\n                        key={element.id}\n                        card={element}\n                        getCardsForList={getCardsForList}\n                        boardId={finalId}\n                      />\n                    )\n                  } else {\n                    return <div key={element.id}></div>\n                  }\n                })}\n              </div>\n              <div>\n                <AddCard\n                  key={ele.id}\n                  listId={ele.id}\n                  boardId={finalId}\n                  getCardsForList={getCardsForList}\n                />\n              </div>\n            </div>\n          )\n        })}\n        <AddList boardId={finalId} getBoardsLists={getBoardsLists} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}