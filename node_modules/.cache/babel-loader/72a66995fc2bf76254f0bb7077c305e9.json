{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { MdDelete } from 'react-icons/md';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport '../task2.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashBoardCard({\n  card,\n  getCardsForList,\n  boardId\n}) {\n  _s();\n\n  const [currentCardName, updateCurrentCard] = useState(card.name);\n  const [loadingUpdate, setLoadingUpdate] = useState(false);\n  const [cardState, setCardState] = useState(true);\n\n  const deleteCard = async cardId => {\n    try {\n      setLoadingUpdate(true);\n      await axios.delete(`https://api.trello.com/1/cards/${cardId}?key=${process.env.REACT_APP_KEY}&token=${process.env.REACT_APP_TOKEN}`);\n      const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${process.env.REACT_APP_KEY}&token=${process.env.REACT_APP_TOKEN}`);\n      getCardsForList(getCards.data);\n      setLoadingUpdate(false);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const updateCard = async (e, cardId) => {\n    e.preventDefault();\n\n    try {\n      setLoadingUpdate(true);\n      await axios.put(`https://api.trello.com/1/cards/${cardId}?key=${process.env.REACT_APP_KEY}&token=${process.env.REACT_APP_TOKEN}&name=${currentCardName}`);\n      const getCards = await axios.get(`https://api.trello.com/1/boards/${boardId}/cards?key=${process.env.REACT_APP_KEY}&token=${process.env.REACT_APP_TOKEN}`);\n      setLoadingUpdate(false);\n      setCardState(true);\n      getCardsForList(getCards.data);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleKeyDown = (e, cardId) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      updateCard(e, cardId);\n    }\n  };\n\n  const handleCardChange = e => {\n    updateCurrentCard(e.target.value);\n  };\n\n  const cardData = cardState ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"card-name\",\n    children: currentCardName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"update-card-form\",\n    \"data-testid\": \"updateForm\",\n    onSubmit: e => updateCard(e, card.id),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"current-card-title\",\n      \"data-testid\": \"updateCardInputField\",\n      value: currentCardName,\n      onKeyDown: e => handleKeyDown(e, card.id),\n      onChange: e => handleCardChange(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"update\",\n      className: \"update-card-button\",\n      \"data-testid\": \"updateCardSubmitButton\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, card.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"update-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-testid\": \"makeCardEditable\",\n          onClick: () => {\n            setCardState(false);\n          },\n          children: loadingUpdate ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"update-card-loading\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"lds-facebook\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this) : cardData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-icons\",\n        children: /*#__PURE__*/_jsxDEV(MdDelete, {\n          onClick: () => deleteCard(card.id),\n          \"data-testid\": \"deleteIcon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, card.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DashBoardCard, \"fA7Z9iqyqXTD0ojr2bLqlJ7pGo8=\");\n\n_c = DashBoardCard;\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n};\nexport default DashBoardCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashBoardCard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/components/DashBoardCard.js"],"names":["React","useState","MdDelete","axios","PropTypes","DashBoardCard","card","getCardsForList","boardId","currentCardName","updateCurrentCard","name","loadingUpdate","setLoadingUpdate","cardState","setCardState","deleteCard","cardId","delete","process","env","REACT_APP_KEY","REACT_APP_TOKEN","getCards","get","data","e","console","error","updateCard","preventDefault","put","handleKeyDown","key","handleCardChange","target","value","cardData","id","propTypes","object","func","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { MdDelete } from 'react-icons/md'\nimport axios from 'axios'\n\nimport PropTypes from 'prop-types'\nimport '../task2.css'\n\nfunction DashBoardCard({ card, getCardsForList, boardId }) {\n  const [currentCardName, updateCurrentCard] = useState(card.name)\n  const [loadingUpdate, setLoadingUpdate] = useState(false)\n  const [cardState, setCardState] = useState(true)\n\n  const deleteCard = async (cardId) => {\n    try {\n      setLoadingUpdate(true)\n      await axios.delete(\n        `https://api.trello.com/1/cards/${cardId}?key=${process.env.REACT_APP_KEY}&token=${process.env.REACT_APP_TOKEN}`\n      )\n      const getCards = await axios.get(\n        `https://api.trello.com/1/boards/${boardId}/cards?key=${process.env.REACT_APP_KEY}&token=${process.env.REACT_APP_TOKEN}`\n      )\n      getCardsForList(getCards.data)\n      setLoadingUpdate(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const updateCard = async (e, cardId) => {\n    e.preventDefault()\n    try {\n      setLoadingUpdate(true)\n      await axios.put(\n        `https://api.trello.com/1/cards/${cardId}?key=${process.env.REACT_APP_KEY}&token=${process.env.REACT_APP_TOKEN}&name=${currentCardName}`\n      )\n\n      const getCards = await axios.get(\n        `https://api.trello.com/1/boards/${boardId}/cards?key=${process.env.REACT_APP_KEY}&token=${process.env.REACT_APP_TOKEN}`\n      )\n      setLoadingUpdate(false)\n      setCardState(true)\n      getCardsForList(getCards.data)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  const handleKeyDown = (e, cardId) => {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n      updateCard(e, cardId)\n    }\n  }\n\n  const handleCardChange = (e) => {\n    updateCurrentCard(e.target.value)\n  }\n  const cardData = cardState ? (\n    <h1 className=\"card-name\">{currentCardName}</h1>\n  ) : (\n    <form\n      key={card.id}\n      className=\"update-card-form\"\n      data-testid=\"updateForm\"\n      onSubmit={(e) => updateCard(e, card.id)}\n    >\n      <input\n        className=\"current-card-title\"\n        data-testid=\"updateCardInputField\"\n        value={currentCardName}\n        onKeyDown={(e) => handleKeyDown(e, card.id)}\n        onChange={(e) => handleCardChange(e)}\n      ></input>\n\n      <input\n        type=\"submit\"\n        value=\"update\"\n        className=\"update-card-button\"\n        data-testid=\"updateCardSubmitButton\"\n      />\n    </form>\n  )\n  return (\n    <div>\n      <div className=\"cards\" key={card.id}>\n        <div className=\"update-card\" key={card.id}>\n          <div\n            data-testid=\"makeCardEditable\"\n            onClick={() => {\n              setCardState(false)\n            }}\n          >\n            {loadingUpdate ? (\n              <div className=\"update-card-loading\">\n                <div className=\"lds-facebook\">\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                </div>\n              </div>\n            ) : (\n              cardData\n            )}\n          </div>\n        </div>\n        <div className=\"card-icons\">\n          <MdDelete\n            onClick={() => deleteCard(card.id)}\n            data-testid=\"deleteIcon\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\nDashBoardCard.propTypes = {\n  card: PropTypes.object,\n  getCardsForList: PropTypes.func,\n  boardId: PropTypes.string\n}\n\nexport default DashBoardCard\n"]},"metadata":{},"sourceType":"module"}