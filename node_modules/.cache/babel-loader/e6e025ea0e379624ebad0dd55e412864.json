{"ast":null,"code":"var _jsxFileName = \"/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../task2.css';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport NavBar from '../components/NavBar';\nimport AddCard from '../components/AddCard';\nimport AddList from '../components/AddList';\nimport config from '../config/config';\nimport DashBoardCard from '../components/DashBoardCard';\nimport DashBoardLists from '../components/DashBoardLists';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const {\n    finalId\n  } = useParams();\n  const [boardLists, getBoardsLists] = useState([]);\n  const [boardListCards, getCardsForList] = useState([]);\n  const [currentBoardName, setCurrentBoardName] = useState('');\n  const [currentBackgroundImage, setCurrentImage] = useState('');\n  const [checkBoardName, setBoardName] = useState(false);\n  const [isBackground, setBackground] = useState(false);\n  useEffect(() => {\n    let mount = true;\n\n    const fetchData = async () => {\n      const getLists = await axios.get(`https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`);\n      const getCards = await axios.get(`https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`);\n      const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n\n      if (mount) {\n        setCurrentBoardName(getCurrentBoardName.data.name);\n        getCardsForList(getCards.data);\n        getBoardsLists(getLists.data);\n\n        if (getCurrentBoardName.data.prefs.backgroundImage !== null) {\n          setCurrentImage(getCurrentBoardName.data.prefs.backgroundImage);\n          setBackground(true);\n        } else {\n          setCurrentImage(getCurrentBoardName.data.prefs.backgroundColor);\n          setBackground(false);\n        }\n      }\n    };\n\n    fetchData();\n    return () => mount = false;\n  }, []);\n\n  const handleBoardName = e => {\n    setCurrentBoardName(e.target.value);\n  };\n\n  const updateBoardName = async e => {\n    e.preventDefault();\n    await axios.put(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`);\n    const getCurrentBoardName = await axios.get(`https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`);\n    setCurrentBoardName(getCurrentBoardName.data.name);\n    setBoardName(false);\n  };\n\n  const changeBoardState = () => {\n    setBoardName(true);\n  };\n\n  const boardName = checkBoardName ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"update-board-name\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateBoardName,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentBoardName,\n        onChange: handleBoardName,\n        \"data-testid\": \"updateFormInputField\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Change Name\",\n        \"data-testid\": \"updateFormSubmitButton\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      \"data-testid\": \"currentBoardName\",\n      children: currentBoardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n  const backgroundSet = isBackground ? {\n    backgroundImage: `url(${currentBackgroundImage})`,\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat'\n  } : {\n    backgroundColor: `${currentBackgroundImage}`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-board-page\",\n    style: backgroundSet,\n    \"data-testid\": \"pageBackground\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: changeBoardState,\n      className: \"current-board\",\n      \"data-testid\": \"openBoardNameUpdateForm\",\n      children: boardName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dash-board\",\n      children: [boardLists.map(ele => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(DashBoardLists, {\n            list: ele,\n            getBoardsLists: getBoardsLists\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-cards\",\n            children: boardListCards.map(element => {\n              if (element.idList === ele.id) {\n                return /*#__PURE__*/_jsxDEV(DashBoardCard, {\n                  card: element,\n                  getCardsForList: getCardsForList,\n                  boardId: finalId\n                }, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 23\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {}, element.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 28\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(AddCard, {\n              listId: ele.id,\n              boardId: finalId,\n              getCardsForList: getCardsForList\n            }, ele.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, ele.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(AddList, {\n        boardId: finalId,\n        getBoardsLists: getBoardsLists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"A8OeLBLuQn/AzWjMxWLSYe0+H/8=\", false, function () {\n  return [useParams];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/home/raramuri/Documents/task3-NewBranch Repo clone/groot/atul/react_tasks/src/Task2-Trello Clone/pages/Dashboard.js"],"names":["React","useState","useEffect","useParams","axios","NavBar","AddCard","AddList","config","DashBoardCard","DashBoardLists","Dashboard","finalId","boardLists","getBoardsLists","boardListCards","getCardsForList","currentBoardName","setCurrentBoardName","currentBackgroundImage","setCurrentImage","checkBoardName","setBoardName","isBackground","setBackground","mount","fetchData","getLists","get","key","token","getCards","getCurrentBoardName","data","name","prefs","backgroundImage","backgroundColor","handleBoardName","e","target","value","updateBoardName","preventDefault","put","changeBoardState","boardName","backgroundSet","backgroundPosition","backgroundSize","backgroundRepeat","map","ele","element","idList","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../task2.css'\nimport { useParams } from 'react-router'\nimport axios from 'axios'\nimport NavBar from '../components/NavBar'\nimport AddCard from '../components/AddCard'\nimport AddList from '../components/AddList'\nimport config from '../config/config'\nimport DashBoardCard from '../components/DashBoardCard'\nimport DashBoardLists from '../components/DashBoardLists'\n\nfunction Dashboard() {\n  const { finalId } = useParams()\n\n  const [boardLists, getBoardsLists] = useState([])\n  const [boardListCards, getCardsForList] = useState([])\n  const [currentBoardName, setCurrentBoardName] = useState('')\n  const [currentBackgroundImage, setCurrentImage] = useState('')\n\n  const [checkBoardName, setBoardName] = useState(false)\n  const [isBackground, setBackground] = useState(false)\n  useEffect(() => {\n    let mount = true\n    const fetchData = async () => {\n      const getLists = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}/lists?key=${config.key}&token=${config.token}`\n      )\n\n      const getCards = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}/cards?key=${config.key}&token=${config.token}`\n      )\n\n      const getCurrentBoardName = await axios.get(\n        `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n      )\n      if (mount) {\n        setCurrentBoardName(getCurrentBoardName.data.name)\n        getCardsForList(getCards.data)\n        getBoardsLists(getLists.data)\n        if (getCurrentBoardName.data.prefs.backgroundImage !== null) {\n          setCurrentImage(getCurrentBoardName.data.prefs.backgroundImage)\n          setBackground(true)\n        } else {\n          setCurrentImage(getCurrentBoardName.data.prefs.backgroundColor)\n          setBackground(false)\n        }\n      }\n    }\n    fetchData()\n\n    return () => (mount = false)\n  }, [])\n\n  const handleBoardName = (e) => {\n    setCurrentBoardName(e.target.value)\n  }\n\n  const updateBoardName = async (e) => {\n    e.preventDefault()\n\n    await axios.put(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}&name=${currentBoardName}`\n    )\n    const getCurrentBoardName = await axios.get(\n      `https://api.trello.com/1/boards/${finalId}?key=${config.key}&token=${config.token}`\n    )\n    setCurrentBoardName(getCurrentBoardName.data.name)\n    setBoardName(false)\n  }\n  const changeBoardState = () => {\n    setBoardName(true)\n  }\n\n  const boardName = checkBoardName ? (\n    <div className=\"update-board-name\">\n      <form onSubmit={updateBoardName}>\n        <input\n          type=\"text\"\n          value={currentBoardName}\n          onChange={handleBoardName}\n          data-testid=\"updateFormInputField\"\n        ></input>\n        <input\n          type=\"submit\"\n          value=\"Change Name\"\n          data-testid=\"updateFormSubmitButton\"\n        ></input>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h1 data-testid=\"currentBoardName\">{currentBoardName}</h1>\n    </div>\n  )\n  const backgroundSet = isBackground\n    ? {\n        backgroundImage: `url(${currentBackgroundImage})`,\n        backgroundPosition: 'center',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat'\n      }\n    : { backgroundColor: `${currentBackgroundImage}` }\n\n  return (\n    <div\n      className=\"dash-board-page\"\n      style={backgroundSet}\n      data-testid=\"pageBackground\"\n    >\n      <NavBar />\n      <div\n        onClick={changeBoardState}\n        className=\"current-board\"\n        data-testid=\"openBoardNameUpdateForm\"\n      >\n        {boardName}\n      </div>\n      <div className=\"dash-board\">\n        {boardLists.map((ele) => {\n          return (\n            <div key={ele.id} className=\"board-list-container\">\n              <DashBoardLists list={ele} getBoardsLists={getBoardsLists} />\n              <div className=\"list-cards\">\n                {boardListCards.map((element) => {\n                  if (element.idList === ele.id) {\n                    return (\n                      <DashBoardCard\n                        key={element.id}\n                        card={element}\n                        getCardsForList={getCardsForList}\n                        boardId={finalId}\n                      />\n                    )\n                  } else {\n                    return <div key={element.id}></div>\n                  }\n                })}\n              </div>\n              <div>\n                <AddCard\n                  key={ele.id}\n                  listId={ele.id}\n                  boardId={finalId}\n                  getCardsForList={getCardsForList}\n                />\n              </div>\n            </div>\n          )\n        })}\n        <AddList boardId={finalId} getBoardsLists={getBoardsLists} />\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}